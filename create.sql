/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 18-Mar-2018 01:33:48 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* Drop Tables */

DROP TABLE IF EXISTS Comment CASCADE;

DROP TABLE IF EXISTS Community CASCADE;

DROP TABLE IF EXISTS CommunityCategory CASCADE;

DROP TABLE IF EXISTS Event CASCADE;

DROP TABLE IF EXISTS EventCategory CASCADE;

DROP TABLE IF EXISTS Friend CASCADE;

DROP TABLE IF EXISTS Invoice CASCADE;

DROP TABLE IF EXISTS Member CASCADE;

DROP TABLE IF EXISTS Notification CASCADE;

DROP TABLE IF EXISTS Report CASCADE;

DROP TABLE IF EXISTS Ticket CASCADE;

DROP TABLE IF EXISTS TicketType CASCADE;

DROP TABLE IF EXISTS Community_Member CASCADE;

DROP TABLE IF EXISTS community_communitycategory CASCADE;

DROP TABLE IF EXISTS event_eventcategory CASCADE;

DROP TABLE IF EXISTS event_member CASCADE;

/* Create Tables */

CREATE TABLE Comment(
	idComment integer PRIMARY KEY,
	text text NOT NULL,
	timestamp timestamp without time zone NOT NULL,
	idEvent integer,
	idMember integer
);

CREATE TABLE Community(
	idCommunity integer PRIMARY KEY,
	name varchar(64) NOT NULL,
	description varchar(256) NOT NULL,
	creationDate date NOT NULL,
	imagePath path NULL,
	publicLink path NULL,
	isPublic boolean NOT NULL
);

CREATE TABLE CommunityCategory(
	idCommunityCategory integer PRIMARY KEY,
	name varchar(50) NULL
);

CREATE TABLE Event(
	idEvent integer PRIMARY KEY,
	name varchar(64) NOT NULL,
	description varchar(516) NOT NULL,
	imagePath path NULL,
	date date NOT NULL,
	country varchar(50) NOT NULL,
	city varchar(50) NOT NULL,
	address varchar(100) NOT NULL,
	publicLink path NULL,
	isPublic boolean NOT NULL
);

CREATE TABLE EventCategory(
	idEventCategory integer PRIMARY KEY,
	name varchar(50) NOT NULL
);

CREATE TABLE Invoice(
	idInvoice integer PRIMARY KEY,
	taxPayerNumber int NULL,
	name varchar(50) NULL,
	address text NULL,
	quantity int NOT NULL CHECK (quantity>0),
	amount int NOT NULL CHECK (amount>0),
	date date NOT NULL
);

CREATE TABLE Member(
	idMember integer PRIMARY KEY,
	username varchar(16)  NOT NULL UNIQUE,
	password text NOT NULL,
	name varchar(50) NOT NULL,
	birthdate date NOT NULL,
	email varchar(50) NOT NULL UNIQUE,
	country varchar(50) NULL,
	city varchar(50) NULL,
	address text NULL,
	taxPayerNumber varchar(20) NULL UNIQUE,
	about varchar(256) NULL,
	profilePicture path NULL,
	registrationDate date NOT NULL,
	sentEmailVerification boolean NOT NULL,
	verifiedEmail boolean NOT NULL,
	isWebsiteAdmin boolean NOT NULL
);

CREATE TABLE Notification(
	idNotification integer PRIMARY KEY,
	acceptedInvitation boolean NULL
);

CREATE TABLE Report(
	idReport integer PRIMARY KEY,
	timestamp timestamp without time zone NOT NULL,
	context text NOT NULL
);

CREATE TABLE Ticket(
	idTicket integer PRIMARY KEY,
	idTicketType integer NULL,
	idInvoice integer NOT NULL,
	idMember integer NOT NULL
);

CREATE TABLE TicketType(
	idTicketType integer PRIMARY KEY,
	price double precision NOT NULL CHECK (price>0),
	initialQuantity integer NOT NULL CHECK (initialQuantity>0),
	"#availableQuantity" integer NULL,
	description text NULL
);

/* Tables to model Many to Many relations */

/*------------Community_Member------------*/
CREATE TABLE Community_Member(
	idCommunity integer NOT NULL,
	idMember integer NOT NULL,
	isAdmin boolean NOT NULL
);

ALTER TABLE Community_Member ADD CONSTRAINT PK_Community_Member
	PRIMARY KEY (idCommunity, idMember);

ALTER TABLE Community_Member ADD CONSTRAINT FK_Community_Member_Community
	FOREIGN KEY (idCommunity) REFERENCES Community(idCommunity);

ALTER TABLE Community_Member ADD CONSTRAINT FK_Community_Member_Member
	FOREIGN KEY (idMember) REFERENCES Member(idMember);

/*------------Community_CommunityCategory------------*/
CREATE TABLE Community_CommunityCategory(
	idCommunity integer NOT NULL,
	idCommunityCategory integer NOT NULL
);

ALTER TABLE Community_CommunityCategory ADD CONSTRAINT PK_Community_CommunityCategory
	PRIMARY KEY (idCommunity, idCommunityCategory);

ALTER TABLE Community_CommunityCategory ADD CONSTRAINT FK_Community_CommunityCategory_Community
	FOREIGN KEY (idCommunity) REFERENCES Community(idCommunity);

ALTER TABLE Community_CommunityCategory ADD CONSTRAINT FK_Community_CommunityCategory_CommunityCategory
	FOREIGN KEY (idCommunityCategory) REFERENCES CommunityCategory(idCommunityCategory);

/*------------Event_EventCategory------------*/
CREATE TABLE Event_EventCategory (
  idEvent integer NOT NULL,
  idEventCategory integer NOT NULL
);

ALTER TABLE Event_EventCategory ADD CONSTRAINT PK_Event_EventCategory
	PRIMARY KEY (idEvent, idEventCategory);

ALTER TABLE Event_EventCategory ADD CONSTRAINT FK_Event
	FOREIGN KEY (idEvent) REFERENCES Event (idEvent);

ALTER TABLE Event_EventCategory ADD CONSTRAINT FK_EventCategory
	FOREIGN KEY (idEventCategory) REFERENCES EventCategory (idEventCategory);


/*------------Event_Member------------*/
CREATE TABLE Event_Member(
  idEvent integer NOT NULL,
  idMember integer NOT NULL,
  isAdmin boolean NOT NULL
);

ALTER TABLE Event_Member ADD CONSTRAINT PK_Event_Member
	PRIMARY KEY (idEvent, idMember);

ALTER TABLE Event_Member ADD CONSTRAINT FK_Event
	FOREIGN KEY (idEvent) REFERENCES Event (idEvent);

ALTER TABLE Event_Member ADD CONSTRAINT FK_Member
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

/*------------Friend------------*/
CREATE TABLE Friend(
	idF1 integer NOT NULL,
	idF2 integer NOT NULL,
	accepted boolean NULL
);

ALTER TABLE Friend ADD CONSTRAINT PK_Friend
	PRIMARY KEY (idF1, idF2);

ALTER TABLE Friend ADD CONSTRAINT FK_Event
	FOREIGN KEY (idF1) REFERENCES Member (idMember);

ALTER TABLE Friend ADD CONSTRAINT FK_Member
	FOREIGN KEY (idF2) REFERENCES Member (idMember);


/* Create Primary Keys, FK, Indexes, Uniques, Checks */

/*-------------------	Comment----------------------*/
ALTER TABLE Comment ADD CONSTRAINT FK_Event
	FOREIGN KEY (idEvent) REFERENCES Event (idEvent);

ALTER TABLE Comment ADD CONSTRAINT FK_Member
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

/*-------------------	Community----------------------*/
ALTER TABLE Ticket ADD CONSTRAINT FK_TicketType
	FOREIGN KEY idTicketType REFERENCES TicketType(idTicketType);

ALTER TABLE Ticket ADD CONSTRAINT FK_Member
	FOREIGN KEY idMember REFERENCES Member(idMember);

/* Create Foreign Key Constraints */
ALTER TABLE Community_Member ADD CONSTRAINT FK_CommunityMember
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

ALTER TABLE Community_Member ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);

ALTER TABLE Community_CommunityCategory ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);

ALTER TABLE Community_CommunityCategory ADD CONSTRAINT FK_Category
	FOREIGN KEY (idCommunityCategory) REFERENCES CommunityCategory (idCommunityCategory);


ALTER TABLE Community_CommunityAdmin ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);

ALTER TABLE Community_CommunityAdmin ADD CONSTRAINT FK_CategoryAdmin
	FOREIGN KEY (idCommunityAdmin) REFERENCES CommunityAdmin (idCommunityAdmin);


ALTER TABLE Ticket ADD CONSTRAINT FK_TicketType
	FOREIGN KEY (idTicketType) REFERENCES TicketType (idTicketType);

ALTER TABLE Ticket ADD CONSTRAINT FK_Member
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

ALTER TABLE Report ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);

ALTER TABLE Report ADD CONSTRAINT FK_Member
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

ALTER TABLE Report ADD CONSTRAINT FK_Event
	FOREIGN KEY (idEvent) REFERENCES Event (idEvent);

ALTER TABLE Report ADD CONSTRAINT FK_Comment
	FOREIGN KEY (idComment) REFERENCES Comment (idComment);


ALTER TABLE Notification ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);

ALTER TABLE Notification ADD CONSTRAINT FK_Member
	FOREIGN KEY (idMember) REFERENCES Member (idMember);

ALTER TABLE Notification ADD CONSTRAINT FK_Event
	FOREIGN KEY (idEvent) REFERENCES Event (idEvent);

ALTER TABLE Notification ADD CONSTRAINT FK_Comment
	FOREIGN KEY (idComment) REFERENCES Comment (idComment);


ALTER TABLE Event ADD CONSTRAINT FK_Community
	FOREIGN KEY (idCommunity) REFERENCES Community (idCommunity);
